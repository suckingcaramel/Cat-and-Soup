

// –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
const MAX_TILT = 12;

document.querySelectorAll('.card-container').forEach(card => {
  // –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
  card.addEventListener('mousemove', e => {
    const rect = card.getBoundingClientRect();
    // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫—É—Ä—Å–æ—Ä–∞ –≤–Ω—É—Ç—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
    const x = e.clientX - rect.left;
    const y = e.clientY - rect.top;
    // –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω [-1, 1]
    const dx = (x / rect.width)  * 2 - 1;  
    const dy = (y / rect.height) * 2 - 1;
    // —Å—á–∏—Ç–∞–µ–º —É–≥–æ–ª –Ω–∞–∫–ª–æ–Ω–∞
    const tiltX =  dy * MAX_TILT;  // –Ω–∞–∫–ª–æ–Ω –ø–æ X (–≤–≤–µ—Ä—Ö/–≤–Ω–∏–∑)
    const tiltY = -dx * MAX_TILT;  // –Ω–∞–∫–ª–æ–Ω –ø–æ Y (–≤–ª–µ–≤–æ/–≤–ø—Ä–∞–≤–æ)
    // –ø—Ä–∏–º–µ–Ω—è–µ–º —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—é
    card.style.transform = `perspective(600px) rotateX(${tiltX}deg) rotateY(${tiltY}deg) scale(1.03)`;
  });

  // –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
  card.addEventListener('mouseleave', () => {
    card.style.transform = 'perspective(600px) rotateX(0deg) rotateY(0deg) scale(1)';
  });

  // –ø–ª–∞–≤–Ω—ã–π –≤—Ö–æ–¥
  card.addEventListener('mouseenter', () => {
    card.style.transition = 'transform 0.2s ease-out';
  });
});






document.addEventListener('DOMContentLoaded', () => {
  const awards         = document.querySelector('.awards');
  const iconsContainer = awards.querySelector('.icons-container');
  const kitties        = Array.from(awards.querySelectorAll('.kitty'));

  // –û–±—â–∏–π –ø—É–ª
  const config = [
    { cls: 'star',  src:'img/star.png',  count: 5 },
    { cls: 'fish',  src:'img/fish.png',  count: 4 },
    { cls: 'heart', src:'img/heart.png', count: 4 },
    { cls: 'paw',   src:'img/paw.png',   count: 5 }
  ];

  function makeAll(cfg) {
    return cfg.flatMap(({cls,src,count}) =>
      Array.from({ length: count }, () => {
        const img = document.createElement('img');
        img.src = src;
        img.className = `icon ${cls}`;
        img.style.opacity = 0;
        iconsContainer.append(img);
        return img;
      })
    );
  }
  const allIcons = makeAll(config);

  function isInside(x, y, rect) {
    return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;
  }

  // –†–∞–∑–º–µ—â–µ–Ω–∏–µ –æ–¥–Ω–æ–π –∏–∫–æ–Ω–∫–∏
  function placeIcon(icon, zone, placed, kittyRects, contRect) {
    const { xMin, xMax, yMin, yMax } = zone;
    const minSeparation = 80;  // —É–≤–µ–ª–∏—á–∏–ª–∏ –¥–æ 80px
    let x, y, tries = 0;

    do {
      x = xMin + Math.random() * (xMax - xMin);
      y = yMin + Math.random() * (yMax - yMin);

      // –Ω–µ –Ω–∞ –∫–æ—Ç–∏–∫–∞—Ö
      if (kittyRects.some(r => isInside(x, y, r))) continue;

      // –Ω–µ –Ω–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –Ω–∞ –ª—é–±—É—é —É–∂–µ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é
      if (placed.some(p => Math.hypot(p.x - x, p.y - y) < minSeparation)) {
        tries++;
        if (tries < 30) continue;  // –¥–∞—ë–º –¥–æ 30 –ø–æ–ø—ã—Ç–æ–∫
      }
      break;
    } while (true);

    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    placed.push({ x, y });

    // —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è
    const scale = 0.5 + Math.random() * 0.5;
    const cls   = icon.classList[1];
    const rot   = (cls === 'fish' || cls === 'heart')
                  ? Math.random()*40 - 20
                  : Math.random()*360;

    icon.style.left      = `${x - contRect.left}px`;
    icon.style.top       = `${y - contRect.top}px`;
    icon.style.transform = `translate(-50%,-50%) rotate(${rot}deg) scale(${scale})`;
    icon.style.opacity   = 1;
  }

  awards.addEventListener('mouseenter', () => {
    const pad  = 20;
    const rect = awards.getBoundingClientRect();
    const midX = rect.left + rect.width / 2;

    const leftZone =  { xMin: rect.left + pad,       xMax: midX - pad,
                        yMin: rect.top  + pad,       yMax: rect.top + rect.height - pad };
    const rightZone = { xMin: midX     + pad,       xMax: rect.left + rect.width - pad,
                        yMin: rect.top  + pad,       yMax: rect.top + rect.height - pad };

    const kittyRects = kitties.map(k => k.getBoundingClientRect());
    const placed     = [];

    allIcons.forEach(icon => {
      const zone = (Math.random() < 0.5) ? leftZone : rightZone;
      placeIcon(icon, zone, placed, kittyRects, rect);
    });
  });

  awards.addEventListener('mouseleave', () => {
    allIcons.forEach(icon => icon.style.opacity = 0);
  });
});




// script.js

const translations = {
  en: {
    // header nav
    'nav-registration': 'REGISTRATION',   
    'nav-news':         'NEWS',
    'nav-youtube':      'YOUTUBE',
    'nav-wiki':         'WIKI',
    'nav-instagram':    'INSTAGRAM',
    'nav-download':     'DOWNLOAD',

    // hero
    'hero-title':       'Cats & Soup',

    // purchase buttons (span –≤–Ω—É—Ç—Ä–∏ –∫–∞–∂–¥–æ–π —Å—Å—ã–ª–∫–∏)
    'btn-google':       'DOWNLOAD ON GOOGLE PLAY',
    'btn-apple':        'DOWNLOAD ON APP STORE',
    'btn-uptodown':     'DOWNLOAD ON UPTODOWN',
    'btn-aptoide':      'DOWNLOAD ON APTOIDE',
    'btn-netflix':      'DOWNLOAD THE NETFLIX VERSION',

    // explore section
    'explore-title':    'The first choice of many cat lovers! Cute game about cats!',
    'explore-text':     'Peaceful forest where cats cook soup in a relaxing idle game for cat lovers. ' +
                        'Cartoon graphics showcase various cat breeds in a fairy forest. ' +
                        'Players can dress, photograph, feed cats in mini-games, and give them names. ' +
                        'Enjoy relaxing ASMR cooking and nature sounds along with customizable background music. ' +
                        'A simple, calm economic simulator where cats autonomously gather resources, unlock recipes and buildings ‚Äî perfect for fans of economic sims and animal restaurants.',

    // testimonials
    'test-1-title':     'Ghostly visitorsüëª',
    'test-1-text':      'At night, ghostly creatures appear in the game, which bring additional recipe points. ' +
                        'This adds an element of surprise and encourages players to enter the game at different times of day.',
    'test-2-title':     'A fish pond for the kittiesüêü',
    'test-2-text':      'In the game, you can build a fish pond that serves solely as a resting place for the SEALs. ' +
                        'This emphasizes concern for the well-being of the characters and adds depth to the gameplay.',
    'test-3-title':     'Complex economic mechanicsüí∞',
    'test-3-text':      'The game incorporates complex resource management mechanics where improving ingredients affects the cost of all dishes of a certain type. ' +
                        'This requires a strategic approach to development and planning.',

    // cards
    'card-1-title':     'Cat rooms',
    'card-1-text':      'Create your own cat room!',
    'card-2-title':     'Events',
    'card-2-text':      'Different decor for different holidays!',
    'card-3-title':     'Rest and work',
    'card-3-text':      'Rest is just as important as hard work!',
    'card-4-title':     'Seasons of the year',
    'card-4-text':      'Experience all four seasons together!',

  },
  ru: {
    // header nav
    'nav-registration': '–†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø',
    'nav-news':         '–ù–û–í–û–°–¢–ò',
    'nav-youtube':      '–Æ–¢–£–ë',
    'nav-wiki':         '–í–ò–ö–ò',
    'nav-instagram':    '–ò–ù–°–¢–ê–ì–†–ê–ú–ú',
    'nav-download':     '–°–ö–ê–ß–ê–¢–¨',

    // hero
    'hero-title':       'Cats & Soup',

    // purchase buttons
    'btn-google':       '–°–ö–ê–ß–ê–¢–¨ –í GOOGLE PLAY',
    'btn-apple':        '–°–ö–ê–ß–ê–¢–¨ –í APP STORE',
    'btn-uptodown':     '–°–ö–ê–ß–ê–¢–¨ –ù–ê UPTODOWN',
    'btn-aptoide':      '–°–ö–ê–ß–ê–¢–¨ –ù–ê APTOIDE',
    'btn-netflix':      '–°–ö–ê–ß–ê–¢–¨ –í–ï–†–°–ò–Æ NETFLIX',

    // explore section
    'explore-title':    '–ü–µ—Ä–≤—ã–π –≤—ã–±–æ—Ä –º–Ω–æ–≥–∏—Ö –ª—é–±–∏—Ç–µ–ª–µ–π –∫–æ—à–µ–∫! –ú–∏–ª–∞—è –∏–≥—Ä–∞ –ø—Ä–æ –∫–æ—Ç–æ–≤!',
    'explore-text':     '–ú–∏—Ä —Å–ø–æ–∫–æ–π–Ω–æ–≥–æ –ª–µ—Å–∞, –≥–¥–µ –∫–æ—Ç—ã –≥–æ—Ç–æ–≤—è—Ç —Å—É–ø –≤ —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–µ–π Idle‚Äë–∏–≥—Ä–µ –¥–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π –∫–æ—à–µ–∫. ' +
                        '–ú—É–ª—å—Ç—è—à–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞ –ø–æ–∫–∞–∂–µ—Ç —Ä–∞–∑–Ω—ã–µ –ø–æ—Ä–æ–¥—ã –≤ –≤–æ–ª—à–µ–±–Ω–æ–º –ª–µ—Å—É. ' +
                        '–ò–≥—Ä–æ–∫–∏ –º–æ–≥—É—Ç –æ–¥–µ–≤–∞—Ç—å, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä–æ–≤–∞—Ç—å, –∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–æ–≤ –≤ –º–∏–Ω–∏‚Äë–∏–≥—Ä–∞—Ö –∏ –¥–∞–≤–∞—Ç—å –∏–º –∏–º–µ–Ω–∞. ' +
                        '–ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–º ASMR‚Äë–≥–æ—Ç–æ–≤–∫–æ–π –∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–º–∏ –∑–≤—É–∫–∞–º–∏ –≤–º–µ—Å—Ç–µ —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–π —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–æ–π. ' +
                        '–ü—Ä–æ—Å—Ç–∞—è, —Å–ø–æ–∫–æ–π–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∞—è —Å–∏–º—É–ª—è—Ü–∏—è, –≥–¥–µ –∫–æ—Ç—ã –∞–≤—Ç–æ–Ω–æ–º–Ω–æ —Å–æ–±–∏—Ä–∞—é—Ç —Ä–µ—Å—É—Ä—Å—ã, –æ—Ç–∫—Ä—ã–≤–∞—é—Ç —Ä–µ—Ü–µ–ø—Ç—ã –∏ —Å—Ç—Ä–æ–µ–Ω–∏—è ‚Äî –∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ñ–∞–Ω–∞—Ç–æ–≤ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–∏–º–æ–≤ –∏ –∏–≥—Ä –ø—Ä–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã.',

    // testimonials
    'test-1-title':     '–ü—Ä–∏–∑—Ä–∞—á–Ω—ã–µ –≥–æ—Å—Ç–∏üëª',
    'test-1-text':      '–ü–æ –Ω–æ—á–∞–º –≤ –∏–≥—Ä–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –ø—Ä–∏–∑—Ä–∞—á–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤–∞, –ø—Ä–∏–Ω–æ—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—á–∫–∏ —Ä–µ—Ü–µ–ø—Ç–æ–≤. ' +
                        '–≠—Ç–æ –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∏–≥—Ä—É –≤ —Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫.',
    'test-2-title':     '–†—ã–±–Ω—ã–π –ø—Ä—É–¥ –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤üêü',
    'test-2-text':      '–í –∏–≥—Ä–µ –º–æ–∂–Ω–æ –ø–æ—Å—Ç—Ä–æ–∏—Ç—å —Ä—ã–±–Ω—ã–π –ø—Ä—É–¥, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É–∂–∏—Ç –ª–∏—à—å –º–µ—Å—Ç–æ–º –æ—Ç–¥—ã—Ö–∞ –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤. ' +
                        '–≠—Ç–æ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–µ—Ç –∑–∞–±–æ—Ç—É –æ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≥–ª—É–±–∏–Ω—ã –∏–≥—Ä–æ–≤–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É.',
    'test-3-title':     '–°–ª–æ–∂–Ω–∞—è —ç–∫–æ–Ω–æ–º–∏–∫–∞üí∞',
    'test-3-text':      '–ò–≥—Ä–∞ –≤–∫–ª—é—á–∞–µ—Ç —Å–ª–æ–∂–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞–º–∏, –≥–¥–µ —É–ª—É—á—à–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—Å–µ—Ö –±–ª—é–¥ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞. ' +
                        '–≠—Ç–æ —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ –∫ —Ä–∞–∑–≤–∏—Ç–∏—é –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é.',

    // cards
    'card-1-title':     '–ö–æ–º–Ω–∞—Ç—ã –¥–ª—è –∫–æ—Ç–æ–≤',
    'card-1-text':      '–°–æ–∑–¥–∞–π—Ç–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –∫–æ–º–Ω–∞—Ç—É –¥–ª—è –∫–æ—Ç–∏–∫–æ–≤!',
    'card-2-title':     '–°–æ–±—ã—Ç–∏—è',
    'card-2-text':      '–†–∞–∑–Ω—ã–π –¥–µ–∫–æ—Ä –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤!',
    'card-3-title':     '–û—Ç–¥—ã—Ö –∏ —Ä–∞–±–æ—Ç–∞',
    'card-3-text':      '–û—Ç–¥—ã—Ö –Ω–µ –º–µ–Ω–µ–µ –≤–∞–∂–µ–Ω, —á–µ–º —É—Å–µ—Ä–¥–Ω–∞—è —Ä–∞–±–æ—Ç–∞!',
    'card-4-title':     '–í—Ä–µ–º–µ–Ω–∞ –≥–æ–¥–∞',
    'card-4-text':      '–ü–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ –≤—Å–µ —á–µ—Ç—ã—Ä–µ —Å–µ–∑–æ–Ω–∞ –≤–º–µ—Å—Ç–µ!',


  }
};

const btnEn = document.getElementById('btn-en');
const btnRu = document.getElementById('btn-ru');

function switchLanguage(lang) {
  const dict = translations[lang];
  Object.keys(dict).forEach(key => {
    const el = document.getElementById(key);
    if (el) el.textContent = dict[key];
  });

  // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
  if (lang === 'en') {
    btnEn.classList.add('active');
    btnRu.classList.remove('active');
    document.documentElement.lang = 'en';
  } else {
    btnRu.classList.add('active');
    btnEn.classList.remove('active');
    document.documentElement.lang = 'ru';
  }
}

// –≤–µ—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
btnEn.addEventListener('click', () => switchLanguage('en'));
btnRu.addEventListener('click', () => switchLanguage('ru'));

// —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —è–∑—ã–∫
document.addEventListener('DOMContentLoaded', () => switchLanguage('en'));
